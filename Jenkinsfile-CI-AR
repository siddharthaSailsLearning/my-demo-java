pipeline {
    agent any

    triggers {
        githubPush()
    }

    parameters {
        string(name: 'PROJECT_ID', defaultValue: '8197923751', description: 'GCP Project ID')
        string(name: 'REPO_NAME', defaultValue: 'jenkins-ci-cd-ar', description: 'Artifact Registry Repo Name')
        string(name: 'REPO_LOCATION', defaultValue: 'us-central1', description: 'Artifact Registry Location')
    }

    environment {
        GCP_CREDENTIALS = credentials('GCP_SERVICE_ACCOUNT_KEY')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        IMAGE_NAME = "javaapplication"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        PROJECT_ID = "${params.PROJECT_ID}"
        REPO_NAME = "${params.REPO_NAME}"
        REPO_LOCATION = "${params.REPO_LOCATION}" 
        ARTIFACT_REGISTRY_HOST = "${REPO_LOCATION}-docker.pkg.dev"
        FULL_IMAGE_NAME = "${ARTIFACT_REGISTRY_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:V${IMAGE_TAG}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/siddharthaSailsLearning/my-demo-java.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t $IMAGE_NAME:V$IMAGE_TAG .'
            }
        }

        stage('Authenticate with Artifact Registry') {
            steps {
                echo "üîê Authenticating with Google Artifact Registry..."
                withCredentials([file(credentialsId: 'GCP_SERVICE_ACCOUNT_KEY', variable: 'GCP_KEY_FILE')]) {
                    sh "cat \$GCP_KEY_FILE | docker login -u _json_key --password-stdin https://${ARTIFACT_REGISTRY_HOST}"
                }
            }
        }
      
        stage('Tag and Push Image') {
            steps {
                echo "üì¶ Tagging image as ${FULL_IMAGE_NAME}"
                sh "docker tag ${DOCKERHUB_REPO}:V${IMAGE_TAG} ${FULL_IMAGE_NAME}"
                echo "üöÄ Pushing image to Artifact Registry..."
                sh "docker push ${FULL_IMAGE_NAME}"
                
                // for trail docker login and dockerhub push 
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'docker push $IMAGE_NAME:V$IMAGE_TAG'
            }
        }

        stage('Cleanup') {
            steps {
                echo "üßπ Cleaning up local Docker images..."
                sh "docker rmi ${DOCKERHUB_REPO}:V${IMAGE_TAG} || true"
                sh "docker rmi ${FULL_IMAGE_NAME} || true"
                sh "docker logout https://${ARTIFACT_REGISTRY_HOST}"
            }
        }
    }

      
    post {
        success {
            // echo "‚úÖ CI pipeline successful ‚Äî triggering CD pipeline..."
            // Trigger CD pipeline automatically
            // build job: 'java-app-cd', wait: false, propagate: false
            echo "‚úÖ CI pipeline completed successfully."
        }
        failure {
            // echo "‚ùå CI pipeline failed ‚Äî CD will not run."
            echo "‚ùå CI pipeline failed. Check logs for details."
        }
    }
}
