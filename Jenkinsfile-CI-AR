pipeline {
    agent any

    triggers {
        githubPush()
    }

    parameters {
        string(name: 'PROJECT_ID', defaultValue: '8197923751', description: 'GCP Project ID')
        string(name: 'REPO_NAME', defaultValue: 'jenkins-ci-cd-ar', description: 'Artifact Registry Repo Name')
        string(name: 'REPO_LOCATION', defaultValue: 'us-central1', description: 'Artifact Registry Location')
    }

    environment {
        GCP_CREDENTIALS = credentials('GCP_SERVICE_ACCOUNT_KEY')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        IMAGE_NAME = "javaapplication"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        PROJECT_ID = "${params.PROJECT_ID}"
        REPO_NAME = "${params.REPO_NAME}"
        REPO_LOCATION = "${params.REPO_LOCATION}" 
        ARTIFACT_REGISTRY_HOST = "${REPO_LOCATION}-docker.pkg.dev"
        FULL_IMAGE_NAME = "${ARTIFACT_REGISTRY_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:V${IMAGE_TAG}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/siddharthaSailsLearning/my-demo-java.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh '''
                    docker build -t ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG} .
                    '''
                }
            }
        }

        stage('Setup GCP Auth') {
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                    sh '''
                    gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                    gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet
                    '''
                }
            }
        }
      
        stage('Push to Artifact Registry') {
            steps {
                script {
                    sh '''
                    docker push ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }
}
      
    post {
        success {
            // echo "✅ CI pipeline successful — triggering CD pipeline..."
            // Trigger CD pipeline automatically
            // build job: 'java-app-cd', wait: false, propagate: false
            echo "✅ CI pipeline completed successfully."
        }
        failure {
            // echo "❌ CI pipeline failed — CD will not run."
            echo "❌ CI pipeline failed. Check logs for details."
        }
    }
}
